@model MvcApplication2.Models.BOMDetails
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title> Adani Wilmar </title>
    <meta name="author" content="Sachin Khedkar">
    <meta content="width=device-width, initial-scale=1.0, user-scalable=no" name="viewport">
    <meta name="description" content="">
    <meta name="keywords" content="">
    <script src="~/new/js/html5-trunk.js"></script>
    <link href="~/new/icomoon/style.css" rel="stylesheet">
    <link href="~/new/css/nvd-charts.css" rel="stylesheet">
    <!-- Bootstrap css -->
    <link href="~/new/css/main.css" rel="stylesheet">
    <!-- fullcalendar css -->
    <link href='~/new/css/fullcalendar/fullcalendar.css' rel='stylesheet' />
    <link href='~/new/css/fullcalendar/fullcalendar.print.css' rel='stylesheet' media='print' />
    <style>
        .removeBorder {
            border: 1px solid #ccc !important;
        }

        .errorClass {
            border: 1px solid red !important;
        }
    </style>

</head>
<body class="textcheck">
    <header>
        <div class="row-fluid">
            <div class="span3">
                <a href="#" class="logo">
                    <img src="~/new/img/logo1.png" style="width:185px">

                </a>
            </div>
            <div class="span6" style="align-items:center; margin-top: -79px; color: #FFF;" align="center">



                <h3>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Manufacturing Automation System </h3>
                <h4 style="margin-top:-8px !important;">  &nbsp;&nbsp;&nbsp;&nbsp;(PLC to SAP) </h4>
            </div>
            <div class="span3">
                <div id="mini-nav">
                    <ul class="hidden-phone">
                        <li>
                            <a href="#">Mundra Plant </a>
                        </li>
                        <li>
                            <a href="#">Welcome @ViewBag.LoggedInUser</a>
                        </li>
                        <li>
                            <a href="" onclick="Logout()"> Logout  <span class="fs1" aria-hidden="true" data-icon="&#xe0b1;"></span></a>
                        </li>
                    </ul>
                    <div class="clearfix"></div>
                </div>
            </div>
        </div>
    </header>
    <div class="container-fluid">

        <div class="dashboard-wrapper" style="margin-left:5px !important;">
            <div id="main-nav" class="hidden-phone hidden-tablet">
                <ul>
                    <li>
                        <a href="@Url.Action("GetPOList", "User")">
                            <span class="fs1" aria-hidden="true" data-icon="&#xe0a0;"></span> Process Order List
                        </a>
                    </li>
                    <li>
                        <a href="@Url.Action("GetSubmitedPOList", "User")">
                            <span class="fs1" aria-hidden="true" data-icon="&#xe097;"></span> Submitted PO List
                        </a>
                    </li>

                    <li>
                        <a href="#" class="selected">
                            <span class="fs1" aria-hidden="true" data-icon="&#xe0a0;"></span> Generate BOM
                        </a>
                    </li>
                </ul>
                <div class="clearfix"></div>
            </div>

            <div class="main-container">
                <div class="navbar hidden-desktop">
                    <div class="navbar-inner">
                        <div class="container">
                            <a data-target=".navbar-responsive-collapse" data-toggle="collapse" class="btn btn-navbar">
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </a>
                            <div class="nav-collapse collapse navbar-responsive-collapse">
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row-fluid">
                    <div class="span12">
                        <div class="widget no-margin">
                            <div class="widget-header">
                                <div class="title">
                                    <span class="fs1" aria-hidden="true" data-icon=""></span> Process Order Details
                                </div>
                            </div>
                            <div class="widget-body">
                                <div class="row-fluid">
                                    <div class="span3">

                                        <label class="control-label">
                                            Process Order No.:
                                        </label>
                                        <div class="controls controls-row">
                                            <input type="text" disabled name="processOrderNo" value="@Html.DisplayFor(model => model.processOrederNo)" id="processOrderNo" class="span12" />
                                        </div>
                                    </div>

                                    <div class="span3">

                                        <label class="control-label">
                                            Material :
                                        </label>
                                        <div class="controls controls-row">
                                            <input type="text" name="headerMaterial" disabled value="@Html.DisplayFor(model => model.material)" id="headerMaterial" processorderno"" class="span12" />
                                        </div>
                                    </div>

                                    <div class="span3">

                                        <label class="control-label">
                                            Quantity :
                                        </label>
                                        <div class="controls controls-row">
                                            <input type="text" disabled name="quality" style="text-align:right !important;" value="@Html.DisplayFor(model => model.quantity)" class="span10" />
                                            &nbsp; <span style="position:absolute !important; top:144px;">@Html.DisplayFor(model => model.uom) </span>
                                        </div>

                                    </div>


                                    <div class="span3">

                                        <label class="control-label">
                                            Section   :
                                        </label>
                                        <div class="controls controls-row">
                                            <input type="text" disabled name="refineryName" id="subrefineryName" value="@Html.DisplayFor(model => model.subRefineryName)" class="span12" />
                                            <input type="hidden" disabled name="refinery" id="subrefinery" value="@Html.DisplayFor(model => model.refinery)" class="span12" />
                                        </div>
                                    </div>




                                </div>
                                <div class="row-fluid">


                                    <div class="span3">

                                        <label class="control-label">
                                            Planned Start :
                                        </label>
                                        <div class="controls controls-row">
                                            <input type="text" id="plantStartDate_show" disabled value="" class="span12" />
                                            <input type="hidden" id="plantStartDate" disabled value="@Html.DisplayFor(model => model.PlanStartDate) @Html.DisplayFor(model => model.PlanStartTime)" class="span12" />



                                        </div>
                                    </div>

                                    <div class="span3">

                                        <label class="control-label">
                                            Planned End :
                                        </label>
                                        <div class="controls controls-row">
                                            <input type="text" id="plantEndDate_show" name="plantEndDate_show" disabled value="" class="span12" />


                                            <input type="hidden" id="plantEndDate" disabled value="@Html.DisplayFor(model => model.PlanEndDate) @Html.DisplayFor(model => model.PlanEndTime)" class="span12" />

                                            <input type="hidden" id="isSave_active_start_date" value="@Html.DisplayFor(model => model.ActualStartDate)  @Html.DisplayFor(model => model.ActualStartTime)" class="span12" />
                                            <input type="hidden" id="isSave_active_end_date" value="@Html.DisplayFor(model => model.ActualEndDate)  @Html.DisplayFor(model => model.ActualEndTime)" class="span12" />
                                            <input type="hidden" id="isSave_satatus" value="@Html.DisplayFor(model => model.isSaved)" class="span12" />
                                            <input type="hidden" id="IDOCNumber" value="@Html.DisplayFor(model => model.IDOCNumber)" class="span12" />

                                        </div>
                                    </div>

                                    <div class="span3">
                                        <label class="control-label">
                                            Posting Date :
                                        </label>
                                        <div class="">
                                            <div id="datetimepicker2" class="input-append date datetimepicker14">
                                                <input data-format="dd-MM-yyyy hh:mm:ss" type="text" id="posting_date" value="@Html.DisplayFor(model => model.postingDate)" readonly>
                                                <span class="add-on">
                                                    <i data-time-icon="icon-time" data-date-icon="icon-calendar">
                                                    </i>
                                                </span>
                                            </div>
                                        </div>

                                    </div>

                                    <div class="span3">

                                        <label class="control-label">
                                            Production  Date :
                                        </label>

                                        <div class="">
                                            <div id="datetimepicker2" class="input-append date datetimepicker14">
                                                <input data-format="dd-MM-yyyy hh:mm:ss" type="text" id="production_date" name="production_date" value="@Html.DisplayFor(model => model.productionDate)" readonly>
                                                <span class="add-on">
                                                    <i data-time-icon="icon-time" data-date-icon="icon-calendar">
                                                    </i>
                                                </span>
                                            </div>
                                        </div>

                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="clearfix"></div>



                <div class="row-fluid">

                    <div class="span8">
                        <div class="widget no-margin">
                            <div class="widget-header">
                                <div class="title">
                                    <span class="fs1" aria-hidden="true" data-icon="&#xe14a;"></span> Load Chart
                                </div>
                            </div>
                            <div class="widget-body">
                                <div id="container" style="height:270px !important;"></div>
                            </div>

                        </div>
                    </div>

                    <div class="span4">
                        <div class="widget no-margin">
                            <div class="widget-header">
                                <div class="title">
                                    <span class="fs1" aria-hidden="true" data-icon="&#xe14a;"></span> Date Select
                                </div>
                            </div>
                            <div class="widget-body">
                                <p>
                                    <labe>Actual Start Date  <span style="font-size:10px !important; display:none; color:red;" id="validation_id_start_date">Please select Actual Start Date  </span> </labe><div class="well">
                                        <div id="datetimepicker1" class="input-append date datetimepicker12">
                                            <input data-format="dd-MM-yyyy hh:mm:ss" type="text" id="selected_start" readonly>
                                            <span class="add-on">
                                                <i data-time-icon="icon-time" data-date-icon="icon-calendar">
                                                </i>
                                            </span>

                                        </div>
                                    </div>
                                </p>


                                <!---  <input type="text" value="" id="selected_start" class="txtBox plantStartDate" /></p>-->

                                <p>
                                    <labe> Actual End Date  <span style="font-size:10px !important; display:none; color:red;" id="validation_id_end_date"> Please select Actual End Date  </span> </labe>

                                    <div class="well">
                                        <div id="datetimepicker123" class="input-append date datetimepicker12">
                                            <input data-format="dd-MM-yyyy hh:mm:ss" type="text" id="selected_end" readonly>
                                            <span class="add-on">
                                                <i data-time-icon="icon-time" data-date-icon="icon-calendar">
                                                </i>
                                            </span>
                                        </div>
                                    </div>

                                </p>



                                <p align="center">
                                    <button type="submit" name="GenerateGraph" onclick="LoadMap()" class="btn btn-primary">Load Graph</button> &emsp;
                                    <button type="submit" name="CalculateBill" onclick="ValidateActualDatePO(2)" class="btn btn-primary">Generate BOM</button>

                                </p>

                            </div>
                        </div>
                    </div>
                </div>


                <div class="row-fluid">

                    <div class="span12">
                        <div class="widget no-margin">
                            <div class="widget-header">
                                <div class="title">
                                    <span class="fs1" aria-hidden="true" data-icon="&#xe14a;"></span> Bill of Material (BOM)
                                </div>
                                <input type="hidden" name="batchsplit" id="batchsplit" value="" />
                            </div>
                            <div class="widget-body">


                                <div class="row-fluid">

                                    <div class="span12">

                                        <div class="row-fluid accept_no">
                                            <div id="dynamicDiv1" class="row-fluid"></div>
                                        </div>


                                        <div class="row-fluid accept_no">

                                            <div class="span12">
                                                <div class="widget no-margin">
                                                    <div class="widget-header">
                                                        <div class="title">
                                                            <span class="fs1" aria-hidden="true" data-icon="&#xe14a;"></span> Characterisric
                                                        </div>
                                                    </div>
                                                    <div class="widget-body">
                                                        <div id="dynamicDiv2" class="row-fluid"> </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="span12">

                                                <div id="buttunenable" style="display:none; border-top:1px solid #e0d7d7;" align="center">
                                                    <p> &emsp; </p>
                                                    <p align="center">
                                                        <button type="button" name="save" onclick="SavePODetails()" class="btn btn-primary"> Save </button>
                                                        &emsp; &emsp; &emsp; &emsp; &emsp;
                                                        <button type="button" name="Submit" onclick="SubmitPODetails()" class="btn btn-primary danger_over"> Submit </button>
                                                    </p>
                                                    <p>
                                                        <br /><br /><br />
                                                        <label id="errorMessageondate" class="form-row-feild field-validation-error" style=" color:red !important;"></label>
                                                    </p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>




                    </div>
                    <div class="clearfix"></div>
                    <div>&emsp;</div>
                    <div>&emsp;</div>
                </div>
            </div><!-- dashboard-container -->
        </div><!-- container-fluid -->

        <header>
            <p style="text-align:center; vertical-align: central;  margin-top:-57px; color:#FFFFFF; font-size:17px; font-weight:300;">
                Design And  Developed by ECGIT Pune. For any issues please contact: <mailto:adaniwilmar.support@ecgit.com>adaniwilmar.support@ecgit.com</mailto:adaniwilmar.support@ecgit.com>
            </p>
        </header>

        <script src="~/new/js/jquery.min.js"></script>
        <script class="include" type="text/javascript" src="~/new/js/script.js"></script>
        <style href="~/new/js/style.css" type="text/css"></style>
        <script src="~/new/js/bootstrap.js"></script>


        <link href="~/CSS/bootstrap-datetimepicker.min.css" rel="stylesheet" />
        <script src="~/CSS/bootstrap-datetimepicker.min.js"></script>

        <!-- Flot charts -->
        <script src="~/new/js/flot/jquery.flot.js"></script>
        <script src="~/new/js/flot/jquery.flot.selection.js"></script>
        <script src="~/new/js/flot/jquery.flot.pie.js"></script>


        <!-- Tiny scrollbar js -->
        <script src="~/new/js/tiny-scrollbar.js"></script>

        <!-- Sparkline charts -->
        <!-- Datatables JS -->
        <script src="~/new/js/jquery.dataTables.js"></script>
        <!-- Calendar Js -->
        <script src='~/new/js/fullcalendar/jquery-ui-1.10.2.custom.min.js'></script>
        <script src='~/new/js/fullcalendar/fullcalendar.min.js'></script>
        <!-- Custom Js -->

        <script src="~/new/js/custom-calendar.js"></script>
        <script src="~/new/js/theming.js"></script>

        <script src="~/Scripts/moment.js"></script>
        <script src="~/Scripts/moment-timezone.js"></script>

        <script src="~/Scripts/jquery.numeric.js"></script>

        <script src="~/Scripts/underscore.js"></script>


        <script type="text/javascript">


            $(function () {
                $('.datetimepicker12').datetimepicker({
                    language: 'pt-BR'
                });
            });

            $(function () {
                $('.datetimepicker14').datetimepicker({
                    language: 'pt-BR',
                    format: 'dd-MM-yyyy',
                });
            });
        </script>


        <script>
            function LoadMap() {

                // alert(@ViewBag.IsAuthorized);


                $("#check_BOM_div").remove();
                $("#id_check_charctoristic").remove();

                $("#buttunenable").css({ 'display': "none" });
                var subRefinery = $("#subrefinery").val();
                var actualStartDate = $("#selected_start").val();
                var actualEndDate = $("#selected_end").val();
                var actualStartDate_converted12 = moment(actualStartDate, 'DD-MM-YYYY HH:mm:ss').format("MM-DD-YYYY hh:mm a");
                var actualEndDate_converted12 = moment(actualEndDate, 'DD-MM-YYYY HH:mm:ss').format("MM-DD-YYYY hh:mm a");

                var new_actual_start_date = toTimestamp(actualStartDate_converted12);
                var new_actual_end_date = toTimestamp(actualEndDate_converted12);

                var actualEndDate_check = moment(actualStartDate, 'DD-MM-YYYY HH:mm:ss').format("MM/DD/YYYY");;
                var actualStartDate_check = moment(actualEndDate, 'DD-MM-YYYY HH:mm:ss').format("MM/DD/YYYY");
                var dayas = (actualEndDate_check - actualStartDate_check) / (1000 * 60 * 60 * 24);

                //  alert(Math.round(dayas) + actualEndDate_check);

                // exit;


                if (new_actual_end_date < new_actual_start_date) {
                    alert("Please check actual end date and time, it should not be greater than actual start date and time");
                    return false;
                } else {
                    /* For Server Date   */
                    var actualStartDate_converted = moment(actualStartDate, 'DD-MM-YYYY HH:mm:ss').format("MM-DD-YYYY HH:mm:ss");
                    var actualEndDate_converted = moment(actualEndDate, 'DD-MM-YYYY HH:mm:ss').format("MM-DD-YYYY HH:mm:ss");

                    /* For Local Date   */
                    // var actualStartDate_converted = moment(actualStartDate, 'DD-MM-YYYY HH:mm:ss').format("DD-MM-YYYY hh:mm a");
                    // var actualEndDate_converted = moment(actualEndDate, 'DD-MM-YYYY HH:mm:ss').format("DD-MM-YYYY hh:mm a");




                    var actualStartDateTime = actualStartDate_converted;
                    var actualEndDateTime = actualEndDate_converted;

                    var actualStartDate_val = toTimestamp(actualStartDateTime);
                    var actualEndDate_val = toTimestamp(actualEndDateTime);


                    var millisecondsPerDay = 1000 * 60 * 60 * 24;
                    var millisBetween = actualEndDate_val - actualStartDate_val;
                    var days = millisBetween / millisecondsPerDay;


                    if (days > 3) {

                        alert("Please check Po start and end date it should not be greter than three days ");
                        return false;

                    } else {


                        $.ajax({
                            url: '@Url.Action("LoadGraph", "User")',
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            data: { PlantStartDateTime: actualStartDateTime, PlantEndDateTime: actualEndDateTime, SubRefinery: subRefinery },
                            success: function (response) {

                                if (response != null) {

                                    // console.log("The response  " + JSON.stringify);

                                    chart_call(response.value);

                                } else {
                                    alert("result is null");
                                }
                            },
                            error: function (response) {
                                alert("Exception occur");
                                // console.log("The response " + response.value);


                            }
                        })

                    }
                }
            }
        </script>

        <input type="hidden" id="is_check" value="" />




        <script language="javascript">


            function add(label1, value1) {
                var formRow = document.createElement('div');
                formRow.setAttribute("class", "form-row");
                var formLabel = document.createElement('div');
                formLabel.setAttribute("class", "form-row-label right-text");
                var label = document.createElement('Label');
                label.innerHTML = label1;
                formLabel.appendChild(label);
                var formRowField = document.createElement('div');
                formRowField.setAttribute("class", "form-row-feild");
                var element = document.createElement("input");
                //Assign different attributes to the element.
                element.setAttribute("type", "text");
                element.setAttribute("value", value1);
                element.setAttribute("name", "material");
                element.setAttribute("class", "txtBox");
                formRowField.appendChild(element)
                var dynamicDiv = document.getElementById("dynamicDiv");
                formRow.appendChild(formLabel);
                formRow.appendChild(formRowField);
                dynamicDiv.appendChild(formRow);
            }


            function ValidateActualDatePO(statuse_save) {
                var actualStartDate = $("#selected_start").val();
                var actualEndDate = $("#selected_end").val();
                var subRefinery = $("#subrefinery").val();
                var Issave_PO = $("#processOrderNo").val();
                var actualStartDate_converted12 = moment(actualStartDate, 'DD-MM-YYYY HH:mm:ss').format("MM/DD/YYYY hh:mm a");
                var splite_dat_time = actualStartDate_converted12.split(' ');
                var actual_start_date = splite_dat_time[0];
                var actual_time = splite_dat_time[1] + splite_dat_time[2];
                $.ajax({
                    url: '@Url.Action("ValidateActualDatePO", "User")',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: { ActualStartDate: actual_start_date, ActualstartTime: actual_time, SubRefinery: subRefinery },
                    success: function (response) {
                        if (response != null) {
                            if (response.value == 'exits' && statuse_save == '2') {
                                alert('Please check Actual start datetime and Actual end datetime, this is allready save agianst another PO');
                            } else {

                                show_characteristic(Issave_PO, statuse_save)

                            }
                        } else {
                            alert("result is null");
                        }
                    },
                    error: function (response) {
                        alert("Exception occur");
                        //console.log("The response " + response.value);
                    }
                })
            }

            function show_characteristic(Issave_PO, statuse_save) {

                $.ajax({
                    url: '@Url.Action("CalculateCharacteristic", "User")',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: { PONO: Issave_PO, SaveStatus: statuse_save },
                    success: function (response) {

                        CalculateBill(JSON.parse(response.value), statuse_save);
                    },
                    error: function (response) {
                        alert("Record not found")
                    }
                })
            }


            var responseList = [];
            var characterList = [];
            var chemicalManualEntry = [];
            function CalculateBill(characteristicdata, statuse_save) {

                document.getElementById("dynamicDiv1").innerHTML = "";
                document.getElementById("dynamicDiv2").innerHTML = "";
                ///$("#dynamicDiv2").

                // document.getElementById("id_check_charctoristic").innerHTML = "";


                var actualStartDate = $("#selected_start").val();
                var actualEndDate = $("#selected_end").val();
                var isSave_status = $("#isSave_satatus").val();
                var Issave_PO = $("#processOrderNo").val();
                var subRefinerysd = $("#subrefinery").val();
                var IDOCNumber = $("#IDOCNumber").val();

                var actualStartDate_converted12 = moment(actualStartDate, 'DD-MM-YYYY HH:mm:ss').format("MM-DD-YYYY hh:mm a");
                var actualEndDate_converted12 = moment(actualEndDate, 'DD-MM-YYYY HH:mm:ss').format("MM-DD-YYYY hh:mm a");

                var new_actual_start_date = toTimestamp(actualStartDate_converted12);
                var new_actual_end_date = toTimestamp(actualEndDate_converted12);


                var millisecondsPerDay = 1000 * 60 * 60 * 24;
                var millisecondsPerHour = 1000 * 60 * 60;
                var millisBetween = new_actual_end_date - new_actual_start_date;
                var days = millisBetween / millisecondsPerDay;
                var hours = millisBetween / millisecondsPerHour;

                if (days > 3) {

                    alert("Please check Po start and end date it should not be greter than three days ");
                    return false;

                } else {
                    if (new_actual_end_date < new_actual_start_date) {
                        alert("Please check actual end date and time, it should not be greater than actual start date and time");
                        document.getElementById("dynamicDiv1").innerHTML = "";
                        $("#buttunenable").css({ 'display': "none" });
                        return false;
                    } else {

                        if (actualStartDate == '' || actualEndDate == '') {
                            if (actualStartDate == '') {
                                $("#validation_id_start_date").css({ 'display': "block" });
                            } else {
                                $("#validation_id_start_date").css({ 'display': "none" });;
                            }
                            if (actualEndDate == '') {
                                $("#validation_id_end_date").css({ 'display': "block" });
                            } else {
                                $("#validation_id_end_date").css({ 'display': "none" });
                            }
                            return false;
                        }

                        /* For Server Date */
                        responseList = [];
                        characterList = [];
                        chemicalManualEntry = [];

                        var actualStartDate_converted = moment(actualStartDate, 'DD-MM-YYYY HH:mm:ss').format("MM-DD-YYYY HH:mm:ss");
                        var actualEndDate_converted = moment(actualEndDate, 'DD-MM-YYYY HH:mm:ss').format("MM-DD-YYYY HH:mm:ss");
                        // alert(actualStartDate + '  ' + actualStartDate_converted);
                        //var actualStartDate_converted = moment(actualStartDate, 'DD-MM-YYYY HH:mm:ss').format("DD-MM-YYYY hh:mm a");
                        //var actualEndDate_converted = moment(actualEndDate, 'DD-MM-YYYY HH:mm:ss').format("DD-MM-YYYY hh:mm a");

                        $.ajax({
                            url: '@Url.Action("CalculateBill", "User")',
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            data: { ActualStartDateTime: actualStartDate_converted, ActualEndDateTime: actualEndDate_converted, SubRefinery: subRefinerysd, isSave_status: statuse_save, PONO: Issave_PO, IDOCNumber: parseInt(IDOCNumber) },
                            success: function (response) {

                                // alert(JSON.stringify(response));
                                if (response != null) {
                                    document.getElementById("dynamicDiv1").innerHTML = "";
                                    var Json_array = JSON.parse(response.value);
                                    //console.log(response.value);

                                    var append_div_open = ' <div class="row-fluid" id="check_BOM_div">';
                                    var append_div_enable = '<div class="row-fluid"><div class="span6"><div class="widget no-margin"><div class="widget-header"><div class="title"><span class="fs1" aria-hidden="true" data-icon="&#xe14a;"></span> PLC Data </div></div><div class="widget-body"><div class="row-fluid">';
                                    var append_div_disable = '<div class="span6"><div class="widget no-margin"><div class="widget-header"><div class="title"><span class="fs1" aria-hidden="true" data-icon="&#xe14a;"></span>  Manual Entry</div></div><div class="widget-body"><div class="row-fluid">';
                                    var l = 0;
                                    var k = 0;


                                    var Product = '<div style="border-bottom:1px solid #ccc; font-weight: 700; padding-bottom:5px; margin-bottom:5px"> Product</div>';
                                    var Utilities = '<div style="border-bottom:1px solid #ccc; font-weight: 700; padding-bottom:5px; margin-bottom:5px"> Utilities</div>';
                                    var Chemicals = '<div style="border-bottom:1px solid #ccc; font-weight: 700; padding-bottom:5px; margin-bottom:5px"> Chemicals</div>';
                                    var By_Products = '<div style="border-bottom:1px solid #ccc; font-weight: 700; padding-bottom:5px; margin-bottom:5px"> By Products/Co-Product</div>';
                                    var Raw_Material = '<div style="border-bottom:1px solid #ccc; font-weight: 700; padding-bottom:5px; margin-bottom:5px"> Raw Material</div>';
                                    var general_entry = '<div style="border-bottom:1px solid #ccc; font-weight: 700; padding-bottom:5px; margin-bottom:5px;color:red"> Unknown Component </div>';

                                    var r = 0;
                                    var p = 0;
                                    var u = 0;
                                    var b = 0;
                                    var c = 0;
                                    var g = 0;


                                    var Product1 = '<div style="border-bottom:1px solid #ccc; font-weight: 700; padding-bottom:5px; margin-bottom:5px"> Product</div>';
                                    var Utilities1 = '<div style="border-bottom:1px solid #ccc; font-weight: 700; padding-bottom:5px; margin-bottom:5px"> Utilities</div>';
                                    var Chemicals1 = '<div style="border-bottom:1px solid #ccc; font-weight: 700; padding-bottom:5px; margin-bottom:5px"> Chemicals</div>';
                                    var By_Products1 = '<div style="border-bottom:1px solid #ccc; font-weight: 700; padding-bottom:5px; margin-bottom:5px"> By Products/Co-Product</div>';
                                    var Raw_Material1 = '<div style="border-bottom:1px solid #ccc; font-weight: 700; padding-bottom:5px; margin-bottom:5px"> Raw Material</div>';
                                    var general_entry1 = '<div style="border-bottom:1px solid #ccc; font-weight: 700; padding-bottom:5px; margin-bottom:5px; color:red"> Unknown Component</div>';
                                    var r1 = 0;
                                    var p1 = 0;
                                    var u1 = 0;
                                    var b1 = 0;
                                    var c1 = 0;
                                    var g1 = 0;

                                    var raw_material_quantity = 0;
                                    var product_material_quantity = 0;
                                    var yield_ratio = 0;
                                    var production_overhead = 0;
                                    var maintenance = 0;
                                    var RawMaterialComponentArray = [];
                                    var ProductComponentArray = [];
                                    var UtilitiesComponentArray = [];
                                    var ChemicalsComponentArray = [];
                                    var ByProductComponentArray = [];
                                    var GeneralComponentArray = [];

                                    for (var i = 0; i < Json_array.length; i++) {
                                        var new_array_single = Json_array[i];
                                        var PITag = new_array_single.PITag;
                                        var isManual = new_array_single.isManual;
                                        var isManualWithTag = new_array_single.isManualWithTag;
                                        var BOMCategory = new_array_single.BOMCategory;
                                        var component = new_array_single.component;
                                        var componentDescription = new_array_single.componentDescription;
                                        var quantity = new_array_single.quantity;
                                        var concentrationQuantity = new_array_single.ConcentrationQuantity;
                                        var uom = new_array_single.uom;
                                        var actualQuantity = new_array_single.ActualQuantity;
                                        var Batch = new_array_single.Batch;

                                        var ActualBatchName = new_array_single.Batch;
                                        if (Batch == '') {
                                            Batch = "NA";
                                        }
                                        if (Batch != null) {
                                            var splittedBatch = Batch.split(".");

                                            if (splittedBatch.length > 1) {
                                                var Batch = splittedBatch[0] + 'Dot' + splittedBatch[1] + 'Dot' + splittedBatch[2];
                                            }
                                        }
                                        responseList.push(component + '_' + Batch + '#' + isManual);
                                        if (statuse_save == 2) {
                                            if (BOMCategory == 'Raw-Material') {
                                                raw_material_quantity = quantity;
                                            }
                                            if (BOMCategory == 'Product') {
                                                product_material_quantity = quantity;
                                            }
                                            if (component == 'yield') {
                                                var val = (parseFloat(raw_material_quantity) <= 0 ? 0 : ((product_material_quantity / raw_material_quantity) * 100));
                                                quantity = Number(val).toFixed(2);
                                            }
                                            if (component == 'production') {
                                                quantity = ((parseFloat(raw_material_quantity) <= 0 ||
                                                    parseFloat(product_material_quantity) <= 0) ? 0 : (Number((product_material_quantity / (product_material_quantity / raw_material_quantity))).toFixed(2)));

                                            }
                                            if (component == 'maintenance') {
                                                quantity = ((parseFloat(raw_material_quantity) <= 0 ||
                                                    parseFloat(product_material_quantity) <= 0) ? 0 : (Number((product_material_quantity / (product_material_quantity / raw_material_quantity))).toFixed(2)));
                                            }
                                            if (quantity == "0") {
                                                quantity = '';
                                            }
                                        }


                                        debugger;

                                        if (isManual == true) {
                                            if (quantity == "0") {
                                                quantity = '';
                                            }
                                            if (isManualWithTag == true) {
                                                if (BOMCategory == 'Raw-Material') {
                                                    var Validationformultiplecomponant = _.where(Json_array, { component: component });
                                                    if (Validationformultiplecomponant.length == 1) {
                                                        if (Batch == 'NA') {
                                                            Raw_Material += '<div class="row-fluid" style="color:orange" > <div class="span6">' + componentDescription + ' : </div><div class="span6"><input type="text" class="span8 positive-integer remove_zero order_check_' + l + '" onclick="removeBorder(' + l + ')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                        } else {
                                                            Raw_Material += '<div class="row-fluid" style="color:orange" > <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><div class="span6"><input type="text" class="span8 positive-integer remove_zero order_check_' + l + '" onclick="removeBorder(' + l + ')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                        }
                                                    } else if (Validationformultiplecomponant.length > 1 && Batch != "NA") {
                                                        Raw_Material += '<div class="row-fluid" style="color:orange" > <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><div class="span6"><input type="text" class="span8 positive-integer remove_zero order_check_' + l + '" onclick="removeBorder(' + l + ')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                    }
                                                    r = r + 1;
                                                } else if (BOMCategory == 'Product') {
                                                    var Validationformultiplecomponant = _.where(Json_array, { component: component });
                                                    if (Validationformultiplecomponant.length == 1) {
                                                        if (Batch == 'NA') {
                                                            Product += '<div class="row-fluid" style="color:orange"> <div class="span6">' + componentDescription + ' : </div><div class="span6"><input type="text" class="span8 positive-integer remove_zero order_check_' + l + '" onclick="removeBorder(' + l + ')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                        } else {
                                                            Product += '<div class="row-fluid" style="color:orange"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><div class="span6"><input type="text" class="span8 positive-integer remove_zero order_check_' + l + '" onclick="removeBorder(' + l + ')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                        }
                                                    } else if (Validationformultiplecomponant.length > 1 && Batch != "NA") {
                                                        Product += '<div class="row-fluid" style="color:orange"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><div class="span6"><input type="text" class="span8 positive-integer remove_zero order_check_' + l + '" onclick="removeBorder(' + l + ')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                    }
                                                    p = p + 1;
                                                } else if (BOMCategory == 'Utilities') {
                                                    var Validationformultiplecomponant = _.where(Json_array, { component: component });
                                                    if (Validationformultiplecomponant.length == 1) {
                                                        if (Batch == 'NA') {
                                                            Utilities += '<div class="row-fluid" style="color:orange" > <div class="span6">' + componentDescription + ' : </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text"  onclick="removeBorder(' + l + ')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                        } else {
                                                            Utilities += '<div class="row-fluid" style="color:orange" > <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text"  onclick="removeBorder(' + l + ')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                        }
                                                    } else if (Validationformultiplecomponant.length > 1 && Batch != "NA") {
                                                        Utilities += '<div class="row-fluid" style="color:orange" > <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text"  onclick="removeBorder(' + l + ')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                    }
                                                    u = u + 1;
                                                } else if (BOMCategory == 'Chemicals') {
                                                    var Validationformultiplecomponant = _.where(Json_array, { component: component });
                                                    if (Validationformultiplecomponant.length == 1) {
                                                        if (Batch == 'NA') {
                                                            Chemicals += '<div class="row-fluid" style="color:orange"> <div class="span6">' + componentDescription + '  : </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text" onclick="removeBorder(' + l + ')" name="' + component + '"  style="text-align:right !important;" value="' + quantity + '" id="' + component + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                        } else {
                                                            Chemicals += '<div class="row-fluid" style="color:orange"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text" onclick="removeBorder(' + l + ')" name="' + component + '"  style="text-align:right !important;" value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                        }
                                                    } else if (Validationformultiplecomponant.length > 1 && Batch != "NA") {
                                                        Chemicals += '<div class="row-fluid" style="color:orange"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text" onclick="removeBorder(' + l + ')" name="' + component + '"  style="text-align:right !important;" value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                    }
                                                    c = c + 1;
                                                } else if (BOMCategory == 'By-Products / Co-Products') {
                                                    var Validationformultiplecomponant = _.where(Json_array, { component: component });
                                                    if (Validationformultiplecomponant.length == 1) {
                                                        if (Batch == 'NA') {
                                                            By_Products += '<div class="row-fluid" style="color:orange"> <div class="span6">' + componentDescription + ': </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text" onclick="removeBorder(' + l + ')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                        } else {
                                                            By_Products += '<div class="row-fluid" style="color:orange"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text" onclick="removeBorder(' + l + ')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                        }
                                                    } else if (Validationformultiplecomponant.length > 1 && Batch != "NA") {
                                                        By_Products += '<div class="row-fluid" style="color:orange"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text" onclick="removeBorder(' + l + ')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                    }
                                                    b = b + 1;
                                                } else {
                                                    var Validationformultiplecomponant = _.where(Json_array, { component: component });
                                                    if (Validationformultiplecomponant.length == 1) {
                                                        if (Batch == 'NA') {
                                                            general_entry += '<div class="row-fluid" style="color:orange"> <div class="span6">' + componentDescription + ' : </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text" onclick="removeBorder(' + l + ')" name="' + component + '"  style="text-align:right !important;"value="' + quantity + '" id="' + component + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                        } else {
                                                            general_entry += '<div class="row-fluid" style="color:orange"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text" onclick="removeBorder(' + l + ')" name="' + component + '"  style="text-align:right !important;"value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                        }
                                                    } else if (Validationformultiplecomponant.length > 1 && Batch != "NA") {
                                                        general_entry += '<div class="row-fluid" style="color:orange"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text" onclick="removeBorder(' + l + ')" name="' + component + '"  style="text-align:right !important;"value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                    }
                                                    g = g + 1;
                                                }
                                                l++;
                                            } else {
                                                if (BOMCategory == 'Raw-Material') {
                                                    var Validationformultiplecomponant = _.where(Json_array, { component: component });
                                                    if (Validationformultiplecomponant.length == 1) {
                                                        if (Batch == 'NA') {
                                                            Raw_Material += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' : </div><div class="span6"><input type="text" class="span8 positive-integer remove_zero order_check_' + l + '" style="text-align:right !important;" onclick="removeBorder(' + l + ')" name="' + component + '" value="' + quantity + '" id="' + component + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                        } else {
                                                            Raw_Material += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><div class="span6"><input type="text" class="span8 positive-integer remove_zero order_check_' + l + '" style="text-align:right !important;" onclick="removeBorder(' + l + ')" name="' + component + '" value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                        }
                                                    } else if (Validationformultiplecomponant.length > 1 && Batch != "NA") {
                                                        Raw_Material += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><div class="span6"><input type="text" class="span8 positive-integer remove_zero order_check_' + l + '" style="text-align:right !important;" onclick="removeBorder(' + l + ')" name="' + component + '" value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                    }
                                                    r = r + 1;
                                                } else if (BOMCategory == 'Product') {
                                                    var Validationformultiplecomponant = _.where(Json_array, { component: component });
                                                    if (Validationformultiplecomponant.length == 1) {
                                                        if (Batch == 'NA') {
                                                            Product += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' : </div><div class="span6"><input type="text" class="span8 positive-integer remove_zero order_check_' + l + '"  onclick="removeBorder(' + l + ')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                        } else {
                                                            Product += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><div class="span6"><input type="text" class="span8 positive-integer remove_zero order_check_' + l + '"  onclick="removeBorder(' + l + ')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                        }
                                                    } else if (Validationformultiplecomponant.length > 1 && Batch != "NA") {
                                                        Product += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><div class="span6"><input type="text" class="span8 positive-integer remove_zero order_check_' + l + '"  onclick="removeBorder(' + l + ')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                    }
                                                    p = p + 1;
                                                } else if (BOMCategory == 'Utilities') {
                                                    u = u + 1;
                                                    if (component == 'machine' || component == 'labour' || component == 'yield' || component == 'production' || component == 'maintenance') {
                                                        if (component == 'machine') {
                                                            Utilities += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' : </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text" onclick="removeBorder(' + l + ')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                        }
                                                        if (component == 'labour') {
                                                            Utilities += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' : </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text" onclick="removeBorder(' + l + ')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                        }
                                                        if (component == 'yield') {
                                                            Utilities += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' : </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text" onclick="removeBorder(' + l + ')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                        }
                                                        if (component == 'production') {
                                                            Utilities += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' : </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text" onclick="removeBorder(' + l + ')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                        }
                                                        if (component == 'maintenance') {
                                                            Utilities += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' : </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text" onclick="removeBorder(' + l + ')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                        }
                                                    }
                                                    else {
                                                        var Validationformultiplecomponant = _.where(Json_array, { component: component });
                                                        if (Validationformultiplecomponant.length == 1) {
                                                            if (Batch == "NA") {
                                                                Utilities += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' : </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text" onclick="removeBorder(' + l + ')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                            } else {
                                                                Utilities += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text" onclick="removeBorder(' + l + ')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                            }
                                                        } else if (Validationformultiplecomponant.length > 1 && Batch != "NA") {
                                                            Utilities += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text" onclick="removeBorder(' + l + ')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                        }
                                                    }
                                                } else if (BOMCategory == 'Chemicals') {
                                                    var Validationformultiplecomponant = _.where(Json_array, { component: component });

                                                    if (Validationformultiplecomponant.length == 1) {
                                                        if (Batch == "NA") {
                                                            Chemicals += '<div class="row-fluid"> <div class="span6">' + componentDescription + '  : </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text" onclick="removeBorder(' + l + ')" name="' + component + '"  style="text-align:right !important;" value="' + quantity + '" id="' + component + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                        } else {
                                                            Chemicals += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text" onclick="removeBorder(' + l + ')" name="' + component + '"  style="text-align:right !important;" value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                        }
                                                    } else if (Validationformultiplecomponant.length > 1 && Batch != "NA") {
                                                        Chemicals += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text" onclick="removeBorder(' + l + ')" name="' + component + '"  style="text-align:right !important;" value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                    }
                                                    c = c + 1;
                                                } else if (BOMCategory == 'By-Products / Co-Products') {
                                                    var Validationformultiplecomponant = _.where(Json_array, { component: component });
                                                    if (Validationformultiplecomponant.length == 1) {
                                                        if (Batch == 'NA') {
                                                            By_Products += '<div class="row-fluid"> <div class="span6">' + componentDescription + ': </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text" onclick="removeBorder(' + l + ')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                        } else {
                                                            By_Products += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text" onclick="removeBorder(' + l + ')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                        }
                                                    } else if (Validationformultiplecomponant.length > 1 && Batch != "NA") {
                                                        By_Products += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text" onclick="removeBorder(' + l + ')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                    }
                                                    b = b + 1;
                                                } else {
                                                    var Validationformultiplecomponant = _.where(Json_array, { component: component });
                                                    if (Validationformultiplecomponant.length == 1) {
                                                        if (Batch == 'NA') {
                                                            general_entry += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' : </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text" onclick="removeBorder(' + l + ')" name="' + component + '"  style="text-align:right !important;"value="' + quantity + '" id="' + component + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                        } else {
                                                            general_entry += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text" onclick="removeBorder(' + l + ')" name="' + component + '"  style="text-align:right !important;"value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                        }
                                                    } else if (Validationformultiplecomponant.length > 1 && Batch != "NA") {
                                                        general_entry += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><div class="span6"><input class="span8 positive-integer remove_zero order_check_' + l + '" type="text" onclick="removeBorder(' + l + ')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '<input type="hidden"  name="' + component + '_status" value="1" id="' + component + '_status" class="span12"></div></div>';
                                                    }
                                                    g = g + 1;
                                                }
                                                l++;
                                            }
                                        }
                                        else {
                                            var checknewarrayvalue = _.where(Json_array, { component: component });
                                            var batchsplittedarray = _.map(checknewarrayvalue, function (item, id) {
                                                return item.Batch;
                                            });

                                            if (BOMCategory == 'Raw-Material') {
                                                var Validationformultiplecomponant = _.where(Json_array, { component: component });
                                                RawMaterialComponentArray.push(component);
                                                if (Validationformultiplecomponant.length == 1) {
                                                    if (Batch == "NA") {
                                                        Raw_Material1 += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' : </div><input type="hidden"  name="' + component + '_status" value="0" id="' + component + '_consantration" class="span12"><div class="span6"><input type="text" class="span8" disabled name="' + component + '" style="text-align:right !important;" value="' + quantity.toFixed(3) + '" id="' + component + '"> ' + uom + '</div></div>';
                                                    } else {
                                                        Raw_Material1 += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><input type="hidden"  name="' + component + '_status" value="0" id="' + component + '_consantration" class="span12"><div class="span6"><input type="text" disabled class="span8 BatchSplitting" name="' + component + '" style="text-align:right !important;" value="' + quantity.toFixed(3) + '" id="' + component + "_" + Batch + '"> ' + uom + '</div></div>';
                                                    }

                                                } else {

                                                    if (Batch == "NA") {
                                                        Raw_Material1 += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' : </div><input type="hidden"  name="' + component + '_status" value="0" id="' + component + '_consantration" class="span12"><div class="span6"><input type="text" class="span8" disabled name="' + component + '" style="text-align:right !important;" value="' + quantity.toFixed(3) + '" id="' + component + '"> ' + uom + '</div></div>';
                                                    } else {
                                                        if (statuse_save == 2) {
                                                            quantity = "";
                                                        } else {
                                                            quantity = quantity;
                                                        }
                                                        Raw_Material1 += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><input type="hidden"  name="' + component + '_status" value="0" id="' + component + '_consantration" class="span12"><div class="span6"><input type="text" class="span8 BatchSplitting" onkeyup="checkcalculation(this.value, \'' + component + '\', \'' + RawMaterialComponentArray.length + '\',  \'' + Batch + '\',  \'' + batchsplittedarray + '\')"  name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '</div></div>';
                                                    }
                                                }
                                                r1 = r1 + 1;

                                            } else if (BOMCategory == 'Product') {
                                                ProductComponentArray.push(component);
                                                var Validationformultiplecomponant = _.where(Json_array, { component: component });
                                                if (Validationformultiplecomponant.length == 1) {
                                                    if (Batch == "NA") {
                                                        Product1 += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' : </div><input type="hidden"  name="' + component + '_status" value="0" id="' + component + '_consantration" class="span12"><div class="span6"><input type="text" class="span8" disabled name="' + component + '" style="text-align:right !important;" value="' + quantity.toFixed(3) + '" id="' + component + '"> ' + uom + '</div></div>';
                                                    } else {
                                                        Product1 += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><input type="hidden"  name="' + component + '_status" value="0" id="' + component + '_consantration" class="span12"><div class="span6"><input type="text" class="span8" name="' + component + '" style="text-align:right !important;" value="' + quantity.toFixed(3) + '" id="' + component + "_" + Batch + '"> ' + uom + '</div></div>';
                                                    }
                                                } else {
                                                    if (statuse_save == 2) {
                                                        quantity = "";
                                                    } else {
                                                        quantity = quantity;
                                                    }
                                                    Product1 += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><input type="hidden"  name="' + component + '_status" value="0" id="' + component + '_consantration" class="span12"><div class="span6"><input type="text" class="span8" onkeyup="checkcalculation(this.value, \'' + component + '\', \'' + ProductComponentArray.length + '\',  \'' + Batch + '\',  \'' + batchsplittedarray + '\')"name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '</div></div>';
                                                }
                                                p1 = p1 + 1;
                                            } else if (BOMCategory == 'Utilities') {
                                                if (concentrationQuantity == "" || concentrationQuantity == "0") {
                                                    concentrationQuantity_new = '100';
                                                } else {
                                                    concentrationQuantity_new = concentrationQuantity;
                                                }

                                                var value_divided = quantity;
                                                quantity = quantity;
                                                var Validationformultiplecomponant = _.where(Json_array, { component: component });
                                                if (Validationformultiplecomponant.length > 1) {
                                                    alert(Validationformultiplecomponant.length);
                                                }
                                                UtilitiesComponentArray.push(component);
                                                if (Validationformultiplecomponant.length == 1) {
                                                    if (Batch == "NA") {
                                                        if (subRefinerysd == '101RNT01' || subRefinerysd == '101RDW01' || subRefinerysd == '101RBD01') {
                                                            chemicalManualEntry.push(component)
                                                            Utilities1 += '<div class="row-fluid"> <div class="span3">' + componentDescription + ' : </div><div class="span3"> <input class="span12" type="text" disabled name="' + component + '_value_PI" style="text-align:right !important;" value="' + value_divided.toFixed(3) + '" id="' + k + '_value_PI" ><input type="hidden"  name="' + component + '_status" value="0"  id="' + k + '_consantration" class="span12"></div> <div class="span3"><input type="text" class="span12 positive-integer"  name="' + component + '_add" style="text-align:right !important;" onkeyup="resource_sharing_calculation(' + k + ')" value="' + concentrationQuantity_new + '" id="' + k + '_add"></div><div class="span3"><input type="text" class="span8 ' + k + '_addaw" disabled name="' + component + '" style="text-align:right !important;" value="' + quantity.toFixed(3) + '" id="' + component + '"> ' + uom + '</div></div>';
                                                        } else {
                                                            Utilities1 += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' : </div><input type="hidden"  name="' + component + '_status" value="0" id="' + component + '_consantration" class="span12"><div class="span6"><input type="text" class="span8" disabled name="' + component + '" style="text-align:right !important;" value="' + quantity.toFixed(3) + '" id="' + component + '"> ' + uom + '</div></div>';
                                                        }
                                                    } else {
                                                        if (subRefinerysd == '101RNT01' || subRefinerysd == '101RDW01' || subRefinerysd == '101RBD01') {
                                                            chemicalManualEntry.push(component);
                                                            Utilities1 += '<div class="row-fluid"> <div class="span3">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><div class="span3"> <input class="span12" type="text" disabled name="' + component + '_value_PI" style="text-align:right !important;" value="' + value_divided.toFixed(3) + '" id="' + k + '_value_PI" ><input type="hidden"  name="' + component + '_status" value="0"  id="' + k + '_consantration" class="span12"></div> <div class="span3"><input type="text" class="span12 positive-integer"  name="' + component + '_add" style="text-align:right !important;" onkeyup="resource_sharing_calculation(' + k + ')" value="' + concentrationQuantity_new + '" id="' + k + '_add"></div><div class="span3"><input type="text" class="span8 ' + k + '_addaw" name="' + component + '" style="text-align:right !important;" value="' + quantity.toFixed(3) + '" id="' + component + "_" + Batch + '"> ' + uom + '</div></div>';
                                                        } else {
                                                            Utilities1 += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><input type="hidden"  name="' + component + '_status" value="0" id="' + component + '_consantration" class="span12"><div class="span6"><input type="text" class="span8" name="' + component + '" style="text-align:right !important;" value="' + quantity.toFixed(3) + '" id="' + component + "_" + Batch + '"> ' + uom + '</div></div>';
                                                        }
                                                    }
                                                } else {
                                                    if (statuse_save == 2) {
                                                        quantity = "";
                                                    } else {
                                                        quantity = quantity;
                                                    }
                                                    Utilities1 += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><input type="hidden"  name="' + component + '_status" value="0" id="' + component + '_consantration" class="span12"><div class="span6"><input type="text" class="span8" onkeyup="checkcalculation(this.value, \'' + component + '\', \'' + UtilitiesComponentArray.length + '\',  \'' + Batch + '\',  \'' + batchsplittedarray + '\')"name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '</div></div>';
                                                }
                                                u1 = u1 + 1;

                                            } else if (BOMCategory == 'Chemicals') {
                                                if (concentrationQuantity == "" || concentrationQuantity == "0") {
                                                    concentrationQuantity_new = '1';
                                                } else {
                                                    concentrationQuantity_new = concentrationQuantity;
                                                }
                                                var value_divided = quantity;
                                                quantity = quantity;

                                                var Validationformultiplecomponant = _.where(Json_array, { component: component });

                                                ChemicalsComponentArray.push(component);
                                                if (Validationformultiplecomponant.length == 1) {
                                                    chemicalManualEntry.push(component);
                                                    if (Batch == "NA") {
                                                        Chemicals1 += '<div class="row-fluid"> <div class="span3">' + componentDescription + ' : </div><div class="span3"> <input class="span12" type="text" disabled name="' + component + '_value_PI" style="text-align:right !important;" value="' + value_divided.toFixed(3) + '" id="' + k + '_value_PI" ><input type="hidden"  name="' + component + '_status" value="0"  id="' + k + '_consantration" class="span12"></div> <div class="span3"><input type="text" class="span12 positive-integer"  name="' + component + '_add" style="text-align:right !important;" onkeyup="change_unit_calculation(' + k + ')" value="' + concentrationQuantity_new + '" id="' + k + '_add"></div><div class="span3"><input type="text" class="span8 ' + k + '_addaw" disabled name="' + component + '" style="text-align:right !important;" value="' + quantity.toFixed(3) + '" id="' + component + '"> ' + uom + '</div></div>';
                                                    } else {
                                                        Chemicals1 += '<div class="row-fluid"> <div class="span3">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><div class="span3"><input class="span12" type="hidden" name="' + component + '_Batch" style="text-align:right !important;" value="' + Batch + '" id="' + k + '_Batch" > <input class="span12" type="text" disabled name="' + component + '_value_PI" style="text-align:right !important;" value="' + value_divided.toFixed(3) + '" id="' + k + '_value_PI" ><input type="hidden"  name="' + component + '_status" value="0"  id="' + k + '_consantration" class="span12"></div> <div class="span3"><input type="text" class="span12 positive-integer"  name="' + component + '_add" style="text-align:right !important;" onkeyup="change_unit_calculation(' + k + ')" value="' + concentrationQuantity_new + '" id="' + k + '_add"></div><div class="span3"><input type="text" class="span8 ' + k + '_addaw" disabled name="' + component + '" style="text-align:right !important;" value="' + quantity.toFixed(3) + '" id="' + component + "_" + Batch + '"> ' + uom + '</div></div>';
                                                    }
                                                } else {
                                                    if (statuse_save == 2) {
                                                        quantity = "";
                                                    } else {
                                                        quantity = quantity;
                                                    }
                                                    Chemicals1 += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><input type="hidden"  name="' + component + '_status" value="0" id="' + component + '_consantration" class="span12"><div class="span6"><input type="text" class="span8" onkeyup="checkcalculation(this.value, \'' + component + '\', \'' + ChemicalsComponentArray.length + '\',  \'' + Batch + '\',  \'' + batchsplittedarray + '\')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '</div></div>';
                                                }
                                                c1 = c1 + 1;
                                            } else if (BOMCategory == 'By-Products / Co-Products') {
                                                var Validationformultiplecomponant = _.where(Json_array, { component: component });

                                                ByProductComponentArray.push(component);
                                                if (Validationformultiplecomponant.length == 1) {
                                                    if (Batch == "NA") {
                                                        By_Products1 += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' : </div><input type="hidden"  name="' + component + '_status" value="0" id="' + component + '_consantration" class="span12"><div class="span6"><input type="text" class="span8" disabled name="' + component + '" style="text-align:right !important;" value="' + quantity.toFixed(3) + '" id="' + component + '"> ' + uom + '</div></div>';
                                                    } else {
                                                        By_Products1 += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><input type="hidden"  name="' + component + '_status" value="0" id="' + component + '_consantration" class="span12"><div class="span6"><input type="text" class="span8" disabled name="' + component + '" style="text-align:right !important;" value="' + quantity.toFixed(3) + '" id="' + component + "_" + Batch + '"> ' + uom + '</div></div>';
                                                    }
                                                } else {
                                                    if (statuse_save == 2) {
                                                        quantity = "";
                                                    } else {
                                                        quantity = quantity;
                                                    }
                                                    By_Products1 += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><input type="hidden"  name="' + component + '_status" value="0" id="' + component + '_consantration" class="span12"><div class="span6"><input type="text" class="span8" onkeyup="checkcalculation(this.value, \'' + component + '\', \'' + ByProductComponentArray.length + '\',  \'' + Batch + '\',  \'' + batchsplittedarray + '\')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '</div></div>';
                                                }
                                                b1 = b1 + 1;
                                            } else {
                                                var Validationformultiplecomponant = _.where(Json_array, { component: component });
                                                if (Validationformultiplecomponant.length > 1) {
                                                    alert(Validationformultiplecomponant.length);
                                                }
                                                GeneralComponentArray.push(component);
                                                if (Validationformultiplecomponant.length == 1) {
                                                    if (Batch == "NA") {
                                                        general_entry1 += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' : </div><input type="hidden"  name="' + component + '_status" value="0" id="' + component + '_consantration" class="span12"><div class="span6"><input type="text" class="span8" disabled name="' + component + '" style="text-align:right !important;" value="' + quantity.toFixed(3) + '" id="' + component + '"> ' + uom + '</div></div>';
                                                    } else {
                                                        general_entry1 += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><input type="hidden"  name="' + component + '_status" value="0" id="' + component + '_consantration" class="span12"><div class="span6"><input type="text" class="span8" disabled name="' + component + '" style="text-align:right !important;" value="' + quantity.toFixed(3) + '" id="' + component + "_" + Batch + '"> ' + uom + '</div></div>';
                                                    }
                                                } else {
                                                    if (statuse_save == 2) {
                                                        quantity = "";
                                                    } else {
                                                        quantity = quantity;
                                                    }
                                                    general_entry1 += '<div class="row-fluid"> <div class="span6">' + componentDescription + ' (Batch :- ' + ActualBatchName + ')' + ' : </div><input type="hidden"  name="' + component + '_status" value="0" id="' + component + '_consantration" class="span12"><div class="span6"><input type="text" class="span8" onkeyup="checkcalculation(this.value, \'' + component + '\', \'' + GeneralComponentArray.length + '\',  \'' + Batch + '\',  \'' + batchsplittedarray + '\')" name="' + component + '" style="text-align:right !important;" value="' + quantity + '" id="' + component + "_" + Batch + '"> ' + uom + '</div></div>';
                                                }
                                                g1 = g1 + 1;
                                            }
                                            var count_check = count_check + k;
                                            k++;
                                        }
                                    }

                                    if (r == "" || r == "0") { var attached_raw_material = ""; } else { var attached_raw_material = Raw_Material; }
                                    if (p == "" || p == "0") { var attached_product = ""; } else { var attached_product = Product; }
                                    if (u == "" || u == "0") { var attached_Utilities = ""; } else { var attached_Utilities = Utilities; }
                                    if (c == "" || c == "0") { var attached_Chemicals = ""; } else { var attached_Chemicals = Chemicals; }
                                    if (b == "" || b == "0") { var attached_By_Products = ""; } else { var attached_By_Products = By_Products; }
                                    if (g == "" || g == "0") { var attached_general_entry = ""; } else { var attached_general_entry = general_entry; }


                                    if (r1 == "" || r1 == "0") { var attached_raw_material1 = ""; } else { var attached_raw_material1 = Raw_Material1; }
                                    if (p1 == "" || p1 == "0") { var attached_product1 = ""; } else { var attached_product1 = Product1; }
                                    if (u1 == "" || u1 == "0") { var attached_Utilities1 = ""; } else { var attached_Utilities1 = Utilities1; }
                                    if (c1 == "" || c1 == "0") { var attached_Chemicals1 = ""; } else { var attached_Chemicals1 = Chemicals1; }
                                    if (b1 == "" || b1 == "0") { var attached_By_Products1 = ""; } else { var attached_By_Products1 = By_Products1; }
                                    if (g1 == "" || g1 == "0") { var attached_general_entry1 = ""; } else { var attached_general_entry1 = general_entry1; }
                                    var characteristic = ' <table id="id_check_charctoristic" width="100%">';
                                    characteristic += '<tr>';
                                    for (var i = 0; i < characteristicdata.length; i++) {


                                        var new_array_single = characteristicdata[i];
                                        characterList.push(new_array_single.CID);

                                        var style_check = '';
                                        if (i == 0 || i == 1) {
                                            style_check = 'margin-left:41px';
                                        } else {

                                        }

                                        if ((new_array_single.CharValue) == null)
                                            new_array_single.CharValue = '';

                                        var array = new_array_single.SubCharactristic;

                                        if (array.length > 1) {


                                            characteristic += '<td style="padding-left:10px;"> ' + new_array_single.CharName + ' </td><td><select class="span12" name="' + new_array_single.CharName + '" style="text-align:right !important;" id="' + new_array_single.CID + '" ><option value="">--Select ' + new_array_single.CharName + '--</option>';

                                            for (var k = 0; k < array.length; k++) {

                                                if (array[k] == new_array_single.CharValue) {
                                                    var selected = 'selected="selected"';
                                                } else {
                                                    var selected = "";
                                                }
                                                characteristic += '<option value="' + array[k] + '" ' + selected + '>' + array[k] + '</option>';
                                            }

                                            characteristic += '</select></td>';
                                        } else {

                                            //   alert("drop dwoun "+array.length);

                                            var disable_data = "";
                                            if (new_array_single.CharName == "Expiration Date" || new_array_single.CharName == "Remaining shelf life") {
                                                disable_data = "disabled"
                                            }

                                            characteristic += '<td style="padding-left:10px;"> ' + new_array_single.CharName + ' </td><td> <input class="span12" type="text" ' + disable_data + '  name="' + new_array_single.CharName + '" style="text-align:right !important;" value="' + new_array_single.CharValue + '" id="' + new_array_single.CID + '" ></div>';
                                        }

                                        if (i == 1 || i == 3 || i == 5 || i == 7 || i == 9) {
                                            characteristic += '</tr><tr>';
                                        }
                                    }
                                    characteristic += '</tr>';
                                    characteristic += '</table>';
                                    var actual_append_data = append_div_open + "<input type='hidden' id='chemicalcount' name='chemicalcount' value='" + c1 + "'><input type='hidden' id='validation_check' name='validation_check' value='" + l + "'>" + append_div_enable + attached_raw_material1 + attached_product1 + attached_Utilities1 + attached_Chemicals1 + attached_By_Products1 + attached_general_entry1 + '</div></div></div></div>' + append_div_disable + attached_raw_material + attached_product + attached_Utilities + attached_Chemicals + attached_By_Products + attached_general_entry + '</div></div></div></div></div></div></div>';
                                    $("#dynamicDiv1").append(actual_append_data);
                                    $("#dynamicDiv2").append(characteristic);
                                    $("#buttunenable").css({ 'display': "block" });

                                    $(".positive-integer").numeric({ negative: true }, function () { alert("Please enter numeric values only"); this.value = ""; this.focus(); });

                                    if (isSave_status == "True") {
                                        chemicalcount();
                                    }

                                } else {
                                    alert("result is null");
                                }
                            },
                            error: function (response) {
                                alert("Record not found for Calculated BOM");
                            }
                        })
                    }
                }
            }




            function chemicalcount() {
                var chemicalcount = $("#chemicalcount").val();
                for (i = 0; i < chemicalcount; i++) {

                    var checmicals_check = $("#checmicals_check_" + i).val();

                    change_unit_calculation(i, checmicals_check);
                }
            }


            function SavePODetails() {

                var Batchsplitting = $("#batchsplit").val();

                if (((Batchsplitting.trim()) != "" || Batchsplitting == "1") && (Batchsplitting != "0")) {
                    alert("The total of all batches in splitting is not matching with the flow meter reading, Please Check.");
                    return false;
                }

                var posting_date = $("#posting_date").val();
                var production_date = $("#production_date").val();
                var Dateand_timevalue_start = $("#selected_start").val();
                var Dateand_timevalue_end = $("#selected_end").val();
                var subRefinery = $("#subrefinery").val();
                var IDOCNumber = $("#IDOCNumber").val();
                var poNo = $("#processOrderNo").val();

                var actualStartDate_converted = moment(Dateand_timevalue_start, 'DD-MM-YYYY HH:mm:ss').format("MM/DD/YYYY hh:mm a");
                var actualEndDate_converted = moment(Dateand_timevalue_end, 'DD-MM-YYYY HH:mm:ss').format("MM/DD/YYYY hh:mm a");

                var splited_Dateand_timevalue_start = actualStartDate_converted.split(' ');
                var splited_Dateand_timevalue_end = actualEndDate_converted.split(' ');

                var actualStartDate = splited_Dateand_timevalue_start[0];
                var actualStartTime = splited_Dateand_timevalue_start[1] + splited_Dateand_timevalue_start[2];

                var actualEndDate = splited_Dateand_timevalue_end[0];
                var actualEndTime = splited_Dateand_timevalue_end[1] + splited_Dateand_timevalue_end[2];

                var refineryResult = [];
                for (var i = 0; i < responseList.length; i++) {
                    var splitForManual = responseList[i].split("#");
                    var componantValueName = splitForManual[0];
                    var ManualAutoSubmit = splitForManual[1];


                    var splitComponunt = componantValueName.split("_");
                    var componantName = splitComponunt[0];
                    var ComponantBatch = splitComponunt[1];


                    var ManualAutoSubmit = splitForManual[1];

                    var PassActualCOmponantId = "";

                    if (ComponantBatch == 'NA') {
                        PassActualCOmponantId = componantName;
                    } else {
                        PassActualCOmponantId = componantValueName;
                    }

                    var actualVal = $("#" + PassActualCOmponantId).val();
                    if (actualVal == "") {
                        actualVal = "0";
                    }
                    var splitActualKey = PassActualCOmponantId;

                    var checkforDot = PassActualCOmponantId.split("Dot");

                    if (checkforDot.length > 1) {
                        var CheckData = checkforDot[0] + '.' + checkforDot[1] + '.' + checkforDot[2];
                        var splitActualKey = CheckData;
                    }
                    refineryResult.push({ key: splitActualKey, value: actualVal, IsmanualSubmit: ManualAutoSubmit });
                }

                var ChemicalManualResult = [];
                for (var i = 0; i < chemicalManualEntry.length; i++) {
                    var DatabaseVal = $("input[name=" + chemicalManualEntry[i] + "_value_PI]").val();
                    var ManualVal = $("input[name=" + chemicalManualEntry[i] + "_add]").val();
                    var BatchVal = $("input[name=" + chemicalManualEntry[i] + "_Batch]").val();


                    if (DatabaseVal && ManualVal && BatchVal) {
                        var finalResult = DatabaseVal + "#" + ManualVal;
                        var Key = chemicalManualEntry[i];

                        var checkforDot = BatchVal.split("Dot");
                        if (checkforDot.length > 1) {
                            var CheckData = checkforDot[0] + '.' + checkforDot[1] + '.' + checkforDot[2];
                            BatchVal = CheckData;
                        }
                        ChemicalManualResult.push({ key: Key, value: finalResult, batch: BatchVal });
                    }
                }

                var CharacteristicResult = [];
                for (var i = 0; i < characterList.length; i++) {
                    var Val = $("#" + characterList[i]).val();
                    var Key = characterList[i];
                    CharacteristicResult.push({ key: Key, value: Val });
                }

                $.ajax({
                    url: '@Url.Action("SavePODetails", "User")',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: { ActualStartDate: actualStartDate, ActualStartTime: actualStartTime, ActualEndDate: actualEndDate, ActualEndTime: actualEndTime, roles: JSON.stringify(refineryResult), data: JSON.stringify(CharacteristicResult), ManualEntryResult: JSON.stringify(ChemicalManualResult), PONO: poNo, IDOCNumber: IDOCNumber, PostingDate: posting_date, ProductionDate: production_date },
                    success: function (response) {
                        if (response != null) {

                            alert('Successfully Saved');
                            window.location = "@Url.Action("GetPOList", "User")";
                        } else {
                            alert("result is null");
                        }
                    },
                    error: function (response) {
                        alert("Exception occur")
                    }

                })
                //  }
            }

            function SubmitPODetails() {
                var flag = true;
                $(".BatchSplitting").each(function () {
                    var btchval = $(this).val();
                    if (btchval.trim() == "" || btchval == "0.000" || btchval == "0") {
                        alert('Raw Material Batch value should be > 0.');
                        $(this).focus();
                        flag = false;
                        return false;
                    }
                });
                if (!flag) {
                    return false;
                }
                var Batchsplitting = $("#batchsplit").val();

                if (((Batchsplitting.trim()) != "" || Batchsplitting == "1") && (Batchsplitting != "0")) {
                    alert("The total of all batches in splitting is not matching with the flow meter reading, Please Check.");
                    return false;
                }


                var validation_check = $("#validation_check").val();


                var array_check_count = [];

                for (p = 0; p < validation_check; p++) {


                    var order_check_record = $(".order_check_" + p).val();

                    if (order_check_record == "" || order_check_record == "0.000" || order_check_record == "0") {
                        $(".order_check_" + p).css('border', '3px solid red');
                        $(".order_check_" + p).removeClass("removeBorder");
                        $(".order_check_" + p).focus();
                        array_check_count.push("1");

                    } else {
                        $(".order_check_" + p).css('border', '3px solid #000 !important');
                    }

                }

                if (array_check_count.length) {

                    //  alert("Please enter all mannual entry fields");
                    return false;
                } else {



                    var posting_date = $("#posting_date").val();
                    var production_date = $("#production_date").val();


                    // var posting_date_expload = posting_date_actuaal.split(" ");
                    // var posting_date = posting_date_expload[0];

                    // var prodduction_date_expload = production_date_actuaal.split(" ");
                    // var production_date = prodduction_date_expload[0];

                    // alert(posting_date);
                    // exit;
                    if (posting_date == "" || production_date == "") {
                        if (posting_date == "" && production_date == "") {
                            //alert("Please enter posting date and production date first");

                            $("#posting_date").css('border', '3px solid red');
                            $("#production_date").css('border', '3px solid red');
                            $("#posting_date").focus();

                        } else if (posting_date == "") {
                            $("#posting_date").css('border', '3px solid red');
                            $("#posting_date").focus();
                        } else if (production_date == "") {
                            $("#production_date").css('border', '3px solid red');
                            $("#production_date").focus();
                        }
                    } else {
                        if (confirm("Please check if quality has been cleared for this process order!!")) {

                            //if (confirm("Are you sure to submit? BoM Once submitted cannot be edited!!")) {
                            if (confirm("Are you sure to Submit? BOM Once submitted cannot be edited!!")) {
                                debugger;
                                var Dateand_timevalue_start = $("#selected_start").val();
                                var Dateand_timevalue_end = $("#selected_end").val();
                                var actualStartDate_converted = moment(Dateand_timevalue_start, 'DD-MM-YYYY HH:mm:ss').format("MM/DD/YYYY hh:mm a");
                                var actualEndDate_converted = moment(Dateand_timevalue_end, 'DD-MM-YYYY HH:mm:ss').format("MM/DD/YYYY hh:mm a");

                                var splited_Dateand_timevalue_start = actualStartDate_converted.split(' ');
                                var splited_Dateand_timevalue_end = actualEndDate_converted.split(' ');

                                var actualStartDate = splited_Dateand_timevalue_start[0];
                                var actualStartTime = splited_Dateand_timevalue_start[1] + splited_Dateand_timevalue_start[2];
                                var actualEndDate = splited_Dateand_timevalue_end[0];
                                var actualEndTime = splited_Dateand_timevalue_end[1] + splited_Dateand_timevalue_end[2];


                                var subRefinery = $("#subrefinery").val();
                                var poNo = $("#processOrderNo").val();
                                var IDOCNumber = $("#IDOCNumber").val();

                                var refineryResult = [];
                                for (var i = 0; i < responseList.length; i++) {
                                    var splitForManual = responseList[i].split("#");
                                    var componantValueName = splitForManual[0];
                                    var ManualAutoSubmit = splitForManual[1];


                                    var splitComponunt = componantValueName.split("_");
                                    var componantName = splitComponunt[0];
                                    var ComponantBatch = splitComponunt[1];


                                    var ManualAutoSubmit = splitForManual[1];

                                    var PassActualCOmponantId = "";

                                    if (ComponantBatch == 'NA') {
                                        PassActualCOmponantId = componantName;
                                    } else {
                                        PassActualCOmponantId = componantValueName;
                                    }

                                    var actualVal = $("#" + PassActualCOmponantId).val();
                                    if (actualVal == "" || actualVal == undefined) {
                                        actualVal = "0";
                                    }
                                    var splitActualKey = PassActualCOmponantId;

                                    var checkforDot = PassActualCOmponantId.split("Dot");

                                    if (checkforDot.length > 1) {
                                        var CheckData = checkforDot[0] + '.' + checkforDot[1] + '.' + checkforDot[2];
                                        var splitActualKey = CheckData;
                                    }
                                    refineryResult.push({ key: splitActualKey, value: actualVal, IsmanualSubmit: ManualAutoSubmit });
                                }

                                var ChemicalManualResult = [];
                                for (var i = 0; i < chemicalManualEntry.length; i++) {
                                    var DatabaseVal = $("input[name=" + chemicalManualEntry[i] + "_value_PI]").val();
                                    var ManualVal = $("input[name=" + chemicalManualEntry[i] + "_add]").val();
                                    var BatchVal = $("input[name=" + chemicalManualEntry[i] + "_Batch]").val();


                                    if (DatabaseVal && ManualVal && BatchVal) {
                                        var finalResult = DatabaseVal + "#" + ManualVal;
                                        var Key = chemicalManualEntry[i];

                                        var checkforDot = BatchVal.split("Dot");
                                        if (checkforDot.length > 1) {
                                            var CheckData = checkforDot[0] + '.' + checkforDot[1] + '.' + checkforDot[2];
                                            BatchVal = CheckData;
                                        }
                                        ChemicalManualResult.push({ key: Key, value: finalResult, batch: BatchVal });
                                    }
                                }
                                var CharacteristicResult = [];
                                for (var i = 0; i < characterList.length; i++) {

                                    var Val = $("#" + characterList[i]).val();

                                    var Key = characterList[i];

                                    CharacteristicResult.push({ key: Key, value: Val });
                                }

                                $.ajax({
                                    url: '@Url.Action("SubmtPODetails", "User")',
                                    contentType: "application/json; charset=utf-8",
                                    dataType: "json",
                                    data: { ActualStartDate: actualStartDate, ActualStartTime: actualStartTime, ActualEndDate: actualEndDate, ActualEndTime: actualEndTime, roles: JSON.stringify(refineryResult), data: JSON.stringify(CharacteristicResult), ManualEntryResult: JSON.stringify(ChemicalManualResult), PONO: poNo, IDOCNumber: IDOCNumber, PostingDate: posting_date, ProductionDate: production_date },
                                    success: function (response) {
                                        if (response != null) {
                                            if (response.status == false) {
                                                var responseMessage = '<p align="center" style = "color:red">Something went wrong</p><p align="center" style = "color:red">Please Try Again / Contact System Administrator</p>';


                                                $('#myModal').modal('show', { backdrop: 'static', keyboard: false });
                                            }
                                            else {
                                                var responseMessage = '<p align="center" style = "color:green">Successfully Submited! </p>';
                                                $('#myModal').modal('show', { backdrop: 'static', keyboard: false });
                                            }
                                            $("#responseMessage").html(responseMessage);

                                        } else {
                                            alert("result is null");
                                        }
                                    },
                                    error: function (response) {
                                        alert("Exception occur")
                                    }

                                })
                            }
                        }
                        return false;
                    }
                }
            }
        </script>

        <script type="text/javascript">
            function change_unit_calculation(PO_no) {
                var Pi_value_id = PO_no + '_value_PI';
                var change_constration_id = PO_no + '_add';
                var actual_value_id = PO_no;
                var Pi_value = $("#" + Pi_value_id).val();
                var change_constration = $("#" + change_constration_id).val();
                var new_actual_value = (Pi_value * change_constration);
                $("." + PO_no + "_addaw").val(new_actual_value.toFixed(3));
            }
        </script>

        <script type="text/javascript">
            function resource_sharing_calculation(PO_no) {
                var Pi_value_id = PO_no + '_value_PI';
                var change_constration_id = PO_no + '_add';
                var actual_value_id = PO_no;
                var Pi_value = $("#" + Pi_value_id).val();
                var change_constration = $("#" + change_constration_id).val();
                var new_actual_value = ((Pi_value * change_constration) / 100);
                $("." + PO_no + "_addaw").val(new_actual_value.toFixed(3));
            }
        </script>



        <script>
            function checkValidation() {
                var order_check = $("#validation_check").val();

                for (u = 0; u <= order_check; u++) {

                }

            }
        </script>
        <script src="~/Scripts/highstock.js"></script>

        <script>

            function toTimestamp(strDate1) {

                var dateTimeParts1 = strDate1.split('-');
                var strDate = dateTimeParts1[0] + '/' + dateTimeParts1[1] + '/' + dateTimeParts1[2];
                var datum = Date.parse(strDate);
                return datum + 39600000;
            }

            function convertDate(date) {

                // # valid js Date and time object format (YYYY-MM-DDTHH:MM:SS)
                var dateTimeParts = date.split(' ');

                // # this assumes time format has NO SPACE between time and am/pm marks.
                if (dateTimeParts[1].indexOf(' ') == -1 && dateTimeParts[2] === undefined) {

                    var theTime = dateTimeParts[1];

                    // # strip out all except numbers and colon
                    var ampm = theTime.replace(/[0-9:]/g, '');

                    // # strip out all except letters (for AM/PM)
                    var time = theTime.replace(/[[^a-zA-Z]/g, '');

                    if (ampm == 'pm') {

                        time = time.split(':');

                        // # if time is 12:00, don't add 12
                        if (time[0] == 12) {
                            time = parseInt(time[0]) + ':' + time[1] + ':00';
                        } else {
                            time = parseInt(time[0]) + 12 + ':' + time[1] + ':00';
                        }

                    } else { // if AM

                        time = time.split(':');

                        // # if AM is less than 10 o'clock, add leading zero
                        if (time[0] < 10) {
                            time = '0' + time[0] + ':' + time[1] + ':00';
                        } else {
                            time = time[0] + ':' + time[1] + ':00';
                        }
                    }
                }
                // # create a new date object from only the date part
                var dateObj = new Date(dateTimeParts[0]);

                // # add leading zero to date of the month if less than 10
                var dayOfMonth = (dateObj.getDate() < 10 ? ("0" + dateObj.getDate()) : dateObj.getDate());

                // # parse each date object part and put all parts together
                var yearMoDay = dateObj.getFullYear() + '-' + (dateObj.getMonth() + 1) + '-' + dayOfMonth;

                // # finally combine re-formatted date and re-formatted time!
                var date = new Date(yearMoDay + 'T' + time);

                return date;

            }

            function chart_call(data) {

                var new_fadeIn_array = [];
                var result = data;
                $.each(result, function (k, v) {
                    new_fadeIn_array.push(v);
                });

                var fadeIn_data = [];
                var fadeout_data = [];

                var feedin_array = new_fadeIn_array[0];
                var feedout_array = new_fadeIn_array[1];


                var fadeIn_data = [];
                for (u = 0; u < feedin_array.length; u++) {
                    var new_array = feedin_array[u];

                    var date_check = new_array.Key;
                    var value_key = toTimestamp(date_check);
                    var quantity_check = new_array.Value;
                    if (quantity_check == '-99999') {
                        quantity_check = null;
                    }
                    fadeIn_data.push([value_key, quantity_check]);
                }

                //console.log(JSON.stringify(fadeIn_data) + ' Feed In Data ');

                var fadeout_data = [];
                for (k = 0; k < feedout_array.length; k++) {
                    var new_array1 = feedout_array[k];
                    var date_check1 = new_array1.Key;

                    var quantity_data = new_array1.Value;

                    //ar val_check1 = quantity_data.replace('"', '');

                    var value_key1 = toTimestamp(date_check1);

                    if (quantity_data == '-99999') {
                        quantity_data = null;
                    }

                    fadeout_data.push([value_key1, quantity_data]);
                }


                //console.log(JSON.stringify(fadeIn_data) + ' Feed Out  Data ');


                // Create the chart
                Highcharts.stockChart('container', {
                    //var array="[[1268092800000,31.86],[1268179200000,32.12],[1268265600000,32.21],[1268352000000,32.37],[1268611200000,31.98],[1268697600000,32.06],[1268784000000,32.02],[1268870400000,32.09],[1268956800000,31.75],[1269216000000,32.11],[1269302400000,32.62],[1269388800000,32.77],[1269475200000,32.38],[1269561600000,32.99],[1269820800000,33.20],[1269907200000,33.69][1269993600000,33.57]]";
                    legend: {
                        enabled: true,
                        align: 'right',
                        backgroundColor: '#FFF',
                        borderColor: '#E8E5E9',
                        borderWidth: 1,
                        layout: 'vertical',
                        verticalAlign: 'top',
                        y: 100,
                        shadow: true
                    },

                    xAxis: {
                        title: {
                            text: 'Date Range '
                        },
                        events: {
                            afterSetExtremes: function () {
                                var startdate = Highcharts.dateFormat('%d-%m-%Y %H:%M', this.min);
                                var endtdate = Highcharts.dateFormat('%d-%m-%Y %H:%M', this.max);

                                $("#selected_start").val(startdate + ':00');
                                $("#selected_end").val(endtdate + ':00');
                            }
                        }
                    },

                    rangeSelector: {
                        selected: 1,
                        enabled: false
                    },
                    series: [{
                        name: 'Feed In',
                        data: fadeIn_data,
                        tooltip: {
                            valueDecimals: 2
                        }
                    },
                        {
                            name: 'Feed Out',
                            data: fadeout_data,
                            tooltip: {
                                valueDecimals: 2
                            }
                        }]
                });


            };

        </script>
        <script>

            function _call_values_chart() {

                var chart = $('#container').highcharts();
                //  var axisMax = chart.xAxis[0].max; // Max of the axis
                // var dataMax = chart.xAxis[0].dataMax; // Max of the data



                var extremes = chart.xAxis[0].getExtremes(),
                  start = new Date(extremes.min),
                  end = new Date(extremes.max);
                var starttime = moment(start).format("DD-MM-YYYY h:mm:ss");
                var endtime = moment(end).format("DD-MM-YYYY h:mm:ss");

                //  var date2 = new Date(dataMin);
                //   alert('date start  : ' + starttime + 'date end : ' + endtime);
            }
        </script>
        <script>
            function Logout() {

                if (confirm("Are you sure to you want to logout?")) {

                    $.ajax({
                        url: '@Url.Action("LogOut","Login")',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (response) {
                            if (response != null && response.status) {
                                // alert("Logged out Successfuly.");
                                var name = sessionStorage.getItem("name");
                                var id = sessionStorage.getItem("id");
                                sessionStorage.removeItem(name);
                                sessionStorage.removeItem(id);
                                window.location.reload();


                            }
                        }
                    });
                }
                return false;
            }


        </script>



        <script>
            //   LoadMap();



            function check_actual_date() {


                var isSave_satatus = $("#isSave_satatus").val();


                if (isSave_satatus == 'False') {

                    var plantStartDate = $("#plantStartDate").val();
                    var plantEndDate = $("#plantEndDate").val();

                    var expploaddata = plantStartDate.split("-");
                    var expploaddata2 = plantEndDate.split("-");

                    //dd.mm.yy
                    //21-03-2017
                    //yy-mm-dd

                    var data_time1 = expploaddata[2].split(" ");
                    var data_time2 = expploaddata2[2].split(" ");


                    var plantStartDate1 = data_time1[0] + '-' + expploaddata[1] + '-' + expploaddata[0] + ' ' + data_time1[1];

                    var plantEndDate1 = data_time2[0] + '-' + expploaddata2[1] + '-' + expploaddata2[0] + ' ' + data_time2[1];



                    //   alert(plantStartDate1);

                } else {
                    var plantStartDate = $("#isSave_active_start_date").val();
                    var plantEndDate = $("#isSave_active_end_date").val();


                    var plantStartDate1 = moment(plantStartDate, 'MM/DD/YYYY HH:mm:ss a').format("DD-MM-YYYY HH:mm:ss");
                    var plantEndDate1 = moment(plantEndDate, 'MM/DD/YYYY HH:mm:ss a').format("DD-MM-YYYY HH:mm:ss");


                }

                $("#selected_start").val(plantStartDate1);
                $("#selected_end").val(plantEndDate1);

                if (isSave_satatus == 'True') {

                    //   CalculateBill(1);
                    ValidateActualDatePO(1);
                }
            }
            check_actual_date();
            LoadMap();

            function select_date() {
                $(".dropdown-menu").css('display', 'none');
            }


        </script>

        <script type="text/javascript">
            $(".positive-integersd").numeric({ decimal: true, negative: true }, function () { alert("Please enter numeric values only"); this.value = ""; this.focus(); });
        </script>



        <script type="text/javascript">
            function change_date() {
                var plantStartDate_show = moment($("#plantStartDate").val(), 'YYYY-MM-DD HH:mm:ss').format("DD-MM-YYYY HH:mm:ss");
                var plantEndDate_show = moment($("#plantEndDate").val(), 'YYYY-MM-DD HH:mm:ss').format("DD-MM-YYYY HH:mm:ss");
                $("#plantStartDate_show").val(plantStartDate_show);
                $("#plantEndDate_show").val(plantEndDate_show);
            }
            change_date();
        </script>

        <script>


            $(".remove_zero").on('keyup', function (event) {
                //event.stopPropagation();
                //event.stopImmediatePropagation();
                //(... rest of your JS code)
                alert("sadasd");
            });
        </script>

        <script>
            window.nativeAlert = window.alert; window.alert = function (message) { var timeBefore = new Date(); var confirmBool = nativeAlert(message); var timeAfter = new Date(); if ((timeAfter - timeBefore) < 350) { MySpecialDialog("You have alerts turned off, turn them back on or die!!!"); } }
            window.nativeConfirm = window.confirm; window.confirm = function (message) { var timeBefore = new Date(); var confirmBool = nativeConfirm(message); var timeAfter = new Date(); if ((timeAfter - timeBefore) < 350) { MySpecialDialog("You have alerts turned off, turn them back on or die!!!"); } return confirmBool; }
        </script>

        <!-- Modal -->
        <div id="myModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
            <div class="modal-header">

            </div>

            <div class="modal-body">
                <div id="responseMessage">
                </div>
            </div>

            <div class="modal-footer">
                <button class="btn" onclick="submit_check()">Ok </button>
            </div>
        </div>

        <script>

            function submit_check() {


                window.location = "@Url.Action("GetPOList", "User")";
            }
        </script>


        <script type="text/javascript">

            function removeBorder(Id) {

                $(".order_check_" + Id).addClass("removeBorder");

            }
        </script>

        <script type="text/javascript">
            function checkcalculation(componantValue, componant, Countcheck, Batch, batchsplittedarray) {
                var actualValue = $("#" + componant).val();
                var splittedValues = batchsplittedarray.split(",");
                var generatearray = [];
                var checkingCounts = 0;
                for (i = 0; i <= splittedValues.length; i++) {
                    var SplittedBatch = splittedValues[i];
                    //  if (SplittedBatch != Batch ) {
                    generatearray.push(SplittedBatch);
                    var ComponantWithBatch = componant + "_" + SplittedBatch;
                    var datavalues = $("#" + ComponantWithBatch).val();
                    if (datavalues) { checkingCounts = parseFloat(checkingCounts) + parseFloat(datavalues); }
                    //}
                }


                var calculatedvaluesIS = parseFloat(checkingCounts);
                var ComponantWithBatch = componant + "_" + Batch;
                if (calculatedvaluesIS > actualValue) {
                    //    alert("Splitted batch values are not match with actual value ! It should equal to actual value");
                    var datavalues = $("#" + ComponantWithBatch).addClass("errorClass");
                    $("#batchsplit").val(1);
                } else if (calculatedvaluesIS < actualValue) {
                    //alert("Splitted batch values are not match with actual value ! It should equal to actual value");
                    var datavalues = $("#" + ComponantWithBatch).addClass("errorClass");
                    $("#batchsplit").val(1);
                } else {
                    $("#batchsplit").val(0);
                    var datavalues = $("#" + ComponantWithBatch).removeClass("errorClass");
                    $('.span8').removeClass("errorClass");
                }
            }
        </script>











</body>
</html>